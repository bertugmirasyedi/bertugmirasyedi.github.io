{
  "hash": "38dae849a5dfb3d2f77d4f6e2244a2f8",
  "result": {
    "markdown": "---\ntitle: 'Book Sales Forecasting: Comparison of Different Models Part 2'\ndescription: Deep Learning Models\ndate: '2022-12-20'\nimage: images/forecast.png\ncategories:\n  - python\n  - time series forecasting\n  - tensorflow\n  - optuna\n  - hyperparameter tuning\nexecute:\n  freeze: true\nhighlight-style: breezedark\ntoc: true\nnumber-sections: true\n---\n\n# Introduction\n\nThis post is the continuation of the [book sales forecasting case](/posts/book-forecasting/book_sales_forecasting.html). In this second part we will create deep learning models and hyperparameter tuning according to the assumed business case on Part 1.\n    \n# Deep Learning\n\nNow we will create the forecasts with deep learning methods - LSTM and CNN. For these models we have to change feature and target DataFrames to Numpy arrays, and reshape features to 3 dimensional shape of (samples, timesteps, features). After creating a base model for both of them and comparing visually by plotting test features with forecasts, we will create our custom function in the next section and do hyperparameter tuning.\n\n## LSTM\n\n\n\nFirstly, we will create a simple network.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"false\" code-summary=\"Simple LSTM Network\"}\nimport tensorflow as tf\nfrom tensorflow.keras import layers, Sequential\n\n# Disable logging\ntf.keras.utils.disable_interactive_logging()\n\nwindow_size = 7\n\n# Create train and test data for LSTM\nlstm_train_features = np.array(train_features)\nlstm_train_targets = np.array(train_targets)\n\nlstm_test_features = np.array(test_features)\nlstm_test_targets = np.array(test_targets)\n\n# Reshape train and test features suitable fo RNN\nlstm_train_features = lstm_train_features.reshape((lstm_train_features.shape[0], 1, lstm_train_features.shape[1]))\n\nlstm_test_features = lstm_test_features.reshape((lstm_test_features.shape[0], 1, lstm_test_features.shape[1]))\n\n# Implement LSTM\nlstm_model = Sequential()\nlstm_model.add(layers.LSTM(50, activation=\"relu\"))\nlstm_model.add(layers.Dense(1))\nlstm_model.compile(loss=\"mape\", optimizer=\"Adam\")\n\n# Fit and Forecast\nlstm_model.fit(lstm_train_features, lstm_train_targets, 1, 5, verbose=0)\nlstm_forecast = lstm_model.predict(lstm_test_features)\n```\n:::\n\n\n::: {.cell cache='true' execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\nMetal device set to: Apple M1\nWARNING:tensorflow:Layer lstm will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"7269782d-819c-44a0-975e-43657c196502\" class=\"plotly-graph-div\" style=\"height:500px; width:700px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"7269782d-819c-44a0-975e-43657c196502\")) {                    Plotly.newPlot(                        \"7269782d-819c-44a0-975e-43657c196502\",                        [{\"hovertemplate\":\"=Observed<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Observed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Observed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[142.0,98.0,109.0,102.0,116.0,99.0,83.0,90.0,84.0,91.0,93.0,113.0,78.0,89.0,87.0,88.0,89.0,101.0,101.0,82.0,92.0,88.0,91.0,90.0,102.0,99.0,89.0,88.0,90.0,85.0,89.0,103.0,104.0,87.0,84.0,83.0,86.0,91.0,102.0,97.0,91.0,85.0,87.0,88.0,85.0,92.0,91.0,84.0,83.0,83.0,81.0,82.0,89.0,105.0,83.0,83.0,81.0,76.0,80.0,99.0,86.0,78.0,77.0,70.0,72.0,70.0,86.0,86.0,67.0,75.0,73.0,71.0,73.0,78.0,93.0,69.0,67.0,66.0,74.0,76.0,80.0,92.0,72.0,71.0,69.0,69.0,66.0,76.0,73.0,65.0,72.0,61.0,55.0,56.0,60.0,69.0,55.0,54.0,59.0,58.0,60.0,69.0,71.0,56.0,64.0,64.0,59.0,66.0,74.0,76.0,52.0,55.0,48.0,54.0,55.0,57.0,66.0,57.0,55.0,53.0,55.0,59.0,69.0,75.0,65.0,63.0,67.0,68.0,63.0,67.0,69.0,64.0,56.0,52.0,56.0,62.0,69.0,68.0,57.0,58.0,60.0,58.0,61.0,74.0,75.0,65.0,63.0,61.0,62.0,68.0,65.0,68.0,65.0,63.0,60.0,62.0,70.0,75.0,79.0,63.0,63.0,60.0,69.0,64.0,70.0,70.0,61.0,56.0,60.0,58.0,62.0,75.0,74.0,57.0,65.0,58.0,59.0,59.0,73.0,73.0,60.0,66.0,68.0,65.0,65.0,70.0,77.0,62.0,66.0,67.0,70.0,67.0,69.0,68.0,64.0,65.0,61.0,61.0,68.0,69.0,76.0,56.0,63.0,64.0,59.0,66.0,75.0,76.0,61.0,64.0,65.0,60.0,69.0,76.0,79.0,67.0,66.0,70.0,64.0,64.0,81.0,78.0,70.0,64.0,69.0,70.0,61.0,78.0,78.0,71.0,67.0,77.0,72.0,72.0,71.0,78.0,69.0,73.0,69.0,69.0,67.0,80.0,86.0,66.0,70.0,70.0,72.0,75.0,86.0,83.0,71.0,63.0,72.0,71.0,67.0,81.0,82.0,73.0,65.0,77.0,61.0,81.0,89.0,79.0,69.0,76.0,68.0,76.0,77.0,82.0,91.0,68.0,71.0,71.0,82.0,72.0,90.0,103.0,77.0,80.0,86.0,90.0,86.0,94.0,98.0,78.0,77.0,77.0,84.0,89.0,95.0,102.0,80.0,84.0,84.0,80.0,71.0,81.0,99.0,79.0,76.0,79.0,81.0,86.0,100.0,96.0,76.0,74.0,86.0,82.0,76.0,91.0,100.0,80.0,87.0,80.0,81.0,87.0,97.0,104.0,79.0,76.0,87.0,76.0,86.0,98.0,95.0,76.0,88.0,82.0,83.0,91.0,87.0,90.0,84.0,83.0,83.0,82.0,87.0,85.0,107.0,85.0,80.0,88.0,78.0,86.0,99.0,98.0,86.0,82.0,84.0,89.0,85.0,102.0,90.0,79.0,83.0,87.0,84.0,94.0,122.0,131.0,126.0,157.0,169.0,143.0],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"=Predicted<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Predicted\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Predicted\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[78.99175262451172,65.54544830322266,71.22276306152344,79.4966049194336,106.65467834472656,82.31255340576172,89.69589233398438,88.49201965332031,86.9084243774414,88.93756866455078,99.14930725097656,104.43612670898438,83.4094467163086,85.37582397460938,84.4439697265625,86.71197509765625,89.13448333740234,100.21682739257812,103.9290771484375,81.86933898925781,86.4039077758789,86.14259338378906,85.56346130371094,89.58351135253906,95.8861312866211,104.8565673828125,78.90453338623047,85.52079772949219,85.47496795654297,85.50823974609375,87.24836730957031,96.16645812988281,110.36981964111328,88.83218383789062,92.8586196899414,90.14202117919922,90.21382904052734,93.9363784790039,101.84547424316406,104.9903335571289,79.64915466308594,85.95240020751953,84.31547546386719,87.74022674560547,86.24687957763672,94.47860717773438,101.57103729248047,76.90589904785156,84.08247375488281,81.12596130371094,83.91815185546875,85.15807342529297,93.5254135131836,98.36585998535156,75.57202911376953,78.68103790283203,80.76996612548828,79.94930267333984,83.08169555664062,92.4102783203125,95.49710083007812,79.73192596435547,87.70150756835938,85.65320587158203,84.92366790771484,86.75096893310547,96.45873260498047,101.95653533935547,75.33378601074219,79.87574768066406,80.19348907470703,80.43521118164062,85.63336181640625,90.41305541992188,96.4637451171875,73.8317642211914,79.03199005126953,80.32351684570312,79.13194274902344,83.773193359375,91.4167709350586,97.70474243164062,73.09180450439453,79.89070129394531,77.32123565673828,81.12712097167969,82.24279022216797,91.96797180175781,99.14167785644531,75.28894805908203,79.96135711669922,72.65520477294922,81.94237518310547,87.27123260498047,94.80926513671875,99.49032592773438,76.09159851074219,60.758113861083984,59.7928466796875,58.256874084472656,83.199951171875,70.25873565673828,75.77210998535156,78.22428894042969,57.31776428222656,56.71184539794922,59.23499298095703,83.26933288574219,94.2115707397461,98.14366912841797,77.46859741210938,81.67040252685547,81.63851928710938,81.3812255859375,85.86807250976562,92.48416900634766,101.53214263916016,77.2940902709961,62.60811996459961,62.85959243774414,63.29413986206055,75.14688873291016,69.8163070678711,78.59180450439453,53.89641571044922,78.79199981689453,77.70594787597656,80.09364318847656,82.33843231201172,88.65859985351562,93.82966613769531,71.59627532958984,75.81916809082031,78.14077758789062,75.4387435913086,77.9633560180664,88.13304901123047,93.75589752197266,50.70918273925781,54.1018180847168,55.48280334472656,78.10179138183594,58.46641540527344,65.87210083007812,73.2445068359375,68.6270980834961,76.44320678710938,74.24500274658203,76.18558502197266,58.234771728515625,66.25877380371094,71.36106872558594,62.770790100097656,54.04320526123047,55.71413803100586,55.27449417114258,77.51814270019531,85.61719512939453,92.7841796875,68.71369934082031,71.0296630859375,69.2794189453125,70.87532806396484,72.54747009277344,83.97810363769531,86.14932250976562,62.42098617553711,68.71226501464844,67.5956039428711,70.16181945800781,70.4231185913086,81.10226440429688,85.94296264648438,62.71651077270508,66.66614532470703,67.29312896728516,65.87972259521484,71.13367462158203,78.14472961425781,85.08026885986328,62.55080032348633,67.286865234375,60.25468444824219,69.32501983642578,74.36331176757812,81.54481506347656,86.21955871582031,62.37596130371094,68.93268585205078,67.953857421875,66.33946228027344,68.0177993774414,77.4964370727539,83.03829193115234,62.58366775512695,64.41669464111328,63.8978385925293,66.15985107421875,68.51659393310547,78.89348602294922,83.13868713378906,62.0500602722168,66.67436218261719,66.47235870361328,66.59556579589844,70.55864715576172,77.17857360839844,86.52018737792969,61.8173713684082,68.33671569824219,69.1539077758789,69.96605682373047,71.89409637451172,70.4001235961914,85.25995635986328,64.8496322631836,69.0872573852539,67.56855773925781,68.42005157470703,72.46136474609375,80.6445083618164,84.67056274414062,60.748313903808594,67.43557739257812,66.66321563720703,70.80583953857422,69.93743133544922,78.62992095947266,86.42609405517578,63.1017951965332,70.56468200683594,68.3362808227539,71.71857452392578,73.57254791259766,82.57451629638672,87.97262573242188,66.26861572265625,69.80397033691406,72.45195007324219,72.19188690185547,75.89291381835938,85.70466613769531,91.78158569335938,67.80113983154297,66.03227996826172,74.15312957763672,77.97281646728516,79.35161590576172,86.73439025878906,92.69966888427734,70.64852905273438,75.5922622680664,72.7437515258789,72.97407531738281,76.56661987304688,84.69195556640625,93.91168975830078,66.6326675415039,72.06007385253906,72.95604705810547,73.7036361694336,78.15422821044922,84.70361328125,93.09493255615234,68.68559265136719,74.13677978515625,72.63542938232422,75.106201171875,75.46263122558594,86.88159942626953,91.54241180419922,68.97437286376953,75.3067398071289,51.52373504638672,54.267887115478516,65.34226989746094,99.91249084472656,81.63220977783203,55.7758674621582,61.17524337768555,84.26110076904297,84.68314361572266,84.72176361083984,92.46269226074219,99.3384780883789,75.4540786743164,83.39044189453125,79.08727264404297,79.94379425048828,83.79602813720703,92.21888732910156,100.12625885009766,74.602783203125,81.92852020263672,80.57457733154297,81.5865249633789,83.09700775146484,93.42542266845703,97.38250732421875,76.83489227294922,80.56571960449219,81.3089370727539,83.149169921875,85.3539047241211,93.64473724365234,91.66230010986328,76.63057708740234,84.61711883544922,82.97403717041016,82.65898895263672,85.04888916015625,95.31941223144531,101.11591339111328,75.31704711914062,79.97144317626953,80.59027099609375,81.25904083251953,87.13512420654297,92.43783569335938,98.84452056884766,76.99390411376953,82.33389282226562,84.0071029663086,83.22682189941406,88.44845581054688,96.74134063720703,103.49264526367188,79.31993103027344,86.4788589477539,84.24240112304688,88.43866729736328,90.03263092041016,100.60575866699219,107.94876098632812,84.55928039550781,79.12975311279297,87.42274475097656,91.52137756347656,93.56075286865234,101.43006134033203,107.45436096191406,86.14276123046875,91.18583679199219,88.54158020019531,89.17904663085938,93.4381103515625,102.17215728759766,111.75942993164062,85.16826629638672,90.71605682373047,91.90758514404297,93.12437438964844,98.42963409423828,105.74530792236328,114.34663391113281,90.47553253173828,75.06304168701172,73.44818115234375,76.39122772216797,100.46344757080078,113.04603576660156,94.68350219726562,71.75022888183594,79.07076263427734,78.08558654785156,78.69434356689453],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"index\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Sales\"}},\"legend\":{\"title\":{\"text\":\"\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Simple LSTM Model Forecasts\"},\"height\":500,\"width\":700},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('7269782d-819c-44a0-975e-43657c196502');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n\n\nFor easier comparison we will compute the previous benchmarks again.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"LSTM Benchmark Scores\"}\nprint(f\"MAPE for LSTM model is: {mean_absolute_percentage_error(lstm_test_targets, lstm_forecast)}\")\nprint(f\"R2 Score for LSTM model is: {r2_score(lstm_test_targets, lstm_forecast)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMAPE for LSTM model is: 0.11684010922908783\nR2 Score for LSTM model is: 0.24530407619175054\n```\n:::\n:::\n\n\nNow let's create a simple CNN network and plot its forecasts.\n\n## CNN\n\n::: {.cell cache='true' execution_count=6}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Simple CNN Model\"}\n# Disable logging\ntf.keras.utils.disable_interactive_logging()\n\n# Create train and test data for CNN\ncnn_train_features = np.array(train_features)\ncnn_train_targets = np.array(train_targets)\n\ncnn_test_features = np.array(test_features)\ncnn_test_targets = np.array(test_targets)\n\n# Reshape train and test features suitable fo RNN\ncnn_train_features = cnn_train_features.reshape((cnn_train_features.shape[0], 1, cnn_train_features.shape[1]))\ncnn_test_features = cnn_test_features.reshape((cnn_test_features.shape[0], 1, cnn_test_features.shape[1]))\n\n# Implement CNN\ncnn_model = Sequential()\ncnn_model.add(layers.Conv1D(50, 1, activation=\"relu\"))\ncnn_model.add(layers.Flatten())\ncnn_model.add(layers.Dense(1))\ncnn_model.compile(loss=\"mape\", optimizer=\"Adam\")\n\n# Fit and Forecast\ncnn_model.fit(cnn_train_features, cnn_train_targets, 1, 5, verbose=0);\ncnn_forecast = cnn_model.predict(cnn_test_features)\n\n# Plot both test data and forecast from the model to compare them visually.\nplot_forecasts(cnn_test_targets, cnn_forecast, title=\"Simple CNN Model Forecasts\");\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"2cc19d7b-4f17-4b02-a64c-18c15f92dcca\" class=\"plotly-graph-div\" style=\"height:500px; width:700px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"2cc19d7b-4f17-4b02-a64c-18c15f92dcca\")) {                    Plotly.newPlot(                        \"2cc19d7b-4f17-4b02-a64c-18c15f92dcca\",                        [{\"hovertemplate\":\"=Observed<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Observed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Observed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[142.0,98.0,109.0,102.0,116.0,99.0,83.0,90.0,84.0,91.0,93.0,113.0,78.0,89.0,87.0,88.0,89.0,101.0,101.0,82.0,92.0,88.0,91.0,90.0,102.0,99.0,89.0,88.0,90.0,85.0,89.0,103.0,104.0,87.0,84.0,83.0,86.0,91.0,102.0,97.0,91.0,85.0,87.0,88.0,85.0,92.0,91.0,84.0,83.0,83.0,81.0,82.0,89.0,105.0,83.0,83.0,81.0,76.0,80.0,99.0,86.0,78.0,77.0,70.0,72.0,70.0,86.0,86.0,67.0,75.0,73.0,71.0,73.0,78.0,93.0,69.0,67.0,66.0,74.0,76.0,80.0,92.0,72.0,71.0,69.0,69.0,66.0,76.0,73.0,65.0,72.0,61.0,55.0,56.0,60.0,69.0,55.0,54.0,59.0,58.0,60.0,69.0,71.0,56.0,64.0,64.0,59.0,66.0,74.0,76.0,52.0,55.0,48.0,54.0,55.0,57.0,66.0,57.0,55.0,53.0,55.0,59.0,69.0,75.0,65.0,63.0,67.0,68.0,63.0,67.0,69.0,64.0,56.0,52.0,56.0,62.0,69.0,68.0,57.0,58.0,60.0,58.0,61.0,74.0,75.0,65.0,63.0,61.0,62.0,68.0,65.0,68.0,65.0,63.0,60.0,62.0,70.0,75.0,79.0,63.0,63.0,60.0,69.0,64.0,70.0,70.0,61.0,56.0,60.0,58.0,62.0,75.0,74.0,57.0,65.0,58.0,59.0,59.0,73.0,73.0,60.0,66.0,68.0,65.0,65.0,70.0,77.0,62.0,66.0,67.0,70.0,67.0,69.0,68.0,64.0,65.0,61.0,61.0,68.0,69.0,76.0,56.0,63.0,64.0,59.0,66.0,75.0,76.0,61.0,64.0,65.0,60.0,69.0,76.0,79.0,67.0,66.0,70.0,64.0,64.0,81.0,78.0,70.0,64.0,69.0,70.0,61.0,78.0,78.0,71.0,67.0,77.0,72.0,72.0,71.0,78.0,69.0,73.0,69.0,69.0,67.0,80.0,86.0,66.0,70.0,70.0,72.0,75.0,86.0,83.0,71.0,63.0,72.0,71.0,67.0,81.0,82.0,73.0,65.0,77.0,61.0,81.0,89.0,79.0,69.0,76.0,68.0,76.0,77.0,82.0,91.0,68.0,71.0,71.0,82.0,72.0,90.0,103.0,77.0,80.0,86.0,90.0,86.0,94.0,98.0,78.0,77.0,77.0,84.0,89.0,95.0,102.0,80.0,84.0,84.0,80.0,71.0,81.0,99.0,79.0,76.0,79.0,81.0,86.0,100.0,96.0,76.0,74.0,86.0,82.0,76.0,91.0,100.0,80.0,87.0,80.0,81.0,87.0,97.0,104.0,79.0,76.0,87.0,76.0,86.0,98.0,95.0,76.0,88.0,82.0,83.0,91.0,87.0,90.0,84.0,83.0,83.0,82.0,87.0,85.0,107.0,85.0,80.0,88.0,78.0,86.0,99.0,98.0,86.0,82.0,84.0,89.0,85.0,102.0,90.0,79.0,83.0,87.0,84.0,94.0,122.0,131.0,126.0,157.0,169.0,143.0],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"=Predicted<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Predicted\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Predicted\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[79.4454574584961,71.96988677978516,77.46942901611328,82.83236694335938,105.00272369384766,82.56544494628906,87.08358764648438,88.2621841430664,86.18254089355469,88.44221496582031,97.543701171875,102.9127426147461,84.72451782226562,83.5124282836914,83.64725494384766,86.55221557617188,89.25666046142578,98.2414779663086,103.67518615722656,82.39457702636719,84.21615600585938,85.57007598876953,84.60503387451172,89.66694641113281,95.13726043701172,104.13475799560547,79.80976104736328,84.64055633544922,85.33746337890625,85.04731750488281,88.34918975830078,94.99142456054688,109.32221984863281,87.85404968261719,88.0222396850586,88.37721252441406,88.05425262451172,92.47383880615234,100.38190460205078,104.43486785888672,79.88783264160156,83.86322784423828,82.86566925048828,86.9256591796875,85.74043273925781,92.69622802734375,101.66617584228516,77.67378997802734,81.79110717773438,80.93724060058594,81.99225616455078,83.94659423828125,92.36921691894531,97.58805084228516,76.11988067626953,76.79579162597656,79.59781646728516,77.94779205322266,82.93537139892578,90.97834777832031,96.37542724609375,81.3945083618164,85.9558334350586,83.34386444091797,83.27570343017578,86.51390838623047,95.27640533447266,102.0868148803711,76.97828674316406,78.47822570800781,79.95092010498047,78.6743392944336,86.35183715820312,89.75857543945312,95.48719787597656,75.60427856445312,77.79135131835938,79.36833953857422,78.43338012695312,83.23826599121094,89.84707641601562,97.17472839355469,73.60728454589844,78.48200225830078,76.69711303710938,79.38065338134766,81.57505798339844,91.40701293945312,98.4640884399414,75.49258422851562,78.86815643310547,73.09384155273438,81.38499450683594,86.8614730834961,92.11417388916016,98.53424835205078,75.79348754882812,64.77047729492188,66.01962280273438,63.481178283691406,82.44412231445312,75.5594253540039,81.3524169921875,78.90011596679688,61.4951171875,62.042274475097656,64.97551727294922,83.62897491455078,92.94459533691406,98.72024536132812,76.86518096923828,79.24209594726562,81.35083770751953,80.47126007080078,86.5355453491211,91.2476806640625,101.7130355834961,77.13479614257812,67.5431900024414,68.29920959472656,67.92726135253906,77.81639099121094,78.17212677001953,86.16548919677734,60.20722579956055,78.58842468261719,79.13761138916016,80.08330535888672,84.83182525634766,90.0011978149414,95.1740493774414,73.09870910644531,75.53402709960938,80.2184066772461,75.52508544921875,79.10910034179688,89.68370056152344,95.21289825439453,57.76580047607422,60.013248443603516,61.51679229736328,76.26615142822266,65.23936462402344,72.05731201171875,80.31986236572266,69.5625,75.68257904052734,74.4217529296875,76.19029235839844,64.85964965820312,72.09605407714844,78.6646957397461,62.906394958496094,58.378604888916016,59.76463317871094,56.53295135498047,75.24468231201172,82.87141418457031,90.44965362548828,67.79944610595703,68.3473892211914,67.03399658203125,67.90750885009766,70.21529388427734,82.09001159667969,83.98124694824219,60.52389907836914,66.30925750732422,65.54041290283203,66.482421875,68.96320343017578,77.90540313720703,82.95586395263672,61.05536651611328,63.20650100708008,64.84998321533203,62.570167541503906,68.55941009521484,74.8388900756836,83.00607299804688,60.347442626953125,63.41020965576172,59.443058013916016,67.21158599853516,72.25376892089844,77.19474792480469,83.74679565429688,61.2121467590332,65.27056884765625,66.3108901977539,64.12319946289062,66.08223724365234,75.06591796875,80.38850402832031,62.1678352355957,61.282325744628906,61.2208137512207,64.18571472167969,66.89443969726562,75.91049194335938,81.63319396972656,60.59450912475586,62.78953552246094,64.21441650390625,63.724151611328125,68.78378295898438,74.78742218017578,84.06843566894531,60.20675277709961,65.53445434570312,66.62040710449219,66.9297866821289,70.7116928100586,70.19392395019531,85.04500579833984,64.28627014160156,65.02086639404297,66.03958129882812,66.49436950683594,71.44478607177734,79.9456787109375,84.6944580078125,60.789398193359375,65.66297149658203,65.35706329345703,70.01512145996094,69.84972381591797,77.21294403076172,87.0152359008789,63.84059143066406,68.53317260742188,68.482421875,70.3227310180664,73.02194213867188,82.0094985961914,88.05653381347656,67.28826141357422,68.90509033203125,72.1344985961914,71.02952575683594,76.8633804321289,85.19905853271484,92.11561584472656,69.77506256103516,66.10901641845703,75.07405853271484,76.7358169555664,77.83076477050781,85.98368835449219,92.78791809082031,71.59648132324219,75.40433502197266,73.96233367919922,72.61591339111328,77.59148406982422,84.28511047363281,95.56845092773438,68.5604476928711,71.31637573242188,74.82657623291016,74.0160140991211,78.88453674316406,85.82604217529297,93.91288757324219,70.06553649902344,74.19535827636719,73.90499877929688,75.61885833740234,77.00076293945312,87.67145538330078,93.11539459228516,71.93582916259766,75.5792236328125,60.329063415527344,60.07170486450195,72.67671203613281,97.87925720214844,85.60477447509766,61.99607849121094,65.4733657836914,82.8487548828125,83.30018615722656,84.5135726928711,90.76419067382812,98.37964630126953,74.57068634033203,81.95301055908203,78.07679748535156,77.60906219482422,84.03951263427734,90.80876922607422,98.51891326904297,74.89260864257812,79.38335418701172,78.66584777832031,79.7376480102539,82.42129516601562,92.00149536132812,96.11187744140625,76.08667755126953,77.89153289794922,80.60304260253906,80.72832489013672,84.46271514892578,92.52507781982422,92.48758697509766,77.91838073730469,82.84358215332031,80.66218566894531,80.95490264892578,84.68084716796875,93.8987045288086,101.13497161865234,76.36449432373047,78.17333984375,80.09174346923828,79.357421875,87.51927185058594,91.30795288085938,97.54135131835938,78.08106994628906,80.54353332519531,82.62679290771484,82.12225341796875,87.4137954711914,94.4239730834961,102.23808288574219,79.07568359375,84.13162231445312,82.91152954101562,86.05345153808594,88.70623016357422,98.80886840820312,106.2458724975586,83.8592758178711,78.0259017944336,87.4729232788086,89.21039581298828,90.75484466552734,98.92822265625,106.13446807861328,85.00503540039062,89.0845718383789,87.89404296875,86.83454132080078,92.10945129394531,99.32184600830078,111.05086517333984,84.0762710571289,87.22467803955078,91.13211059570312,90.54624938964844,96.0092544555664,103.27320098876953,111.82665252685547,88.1637954711914,77.41506958007812,77.5417709350586,79.38956451416016,96.95211029052734,108.67255401611328,98.15043640136719,77.26734161376953,81.31153106689453,82.00542449951172,82.10778045654297],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"index\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Sales\"}},\"legend\":{\"title\":{\"text\":\"\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Simple CNN Model Forecasts\"},\"height\":500,\"width\":700},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('2cc19d7b-4f17-4b02-a64c-18c15f92dcca');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\nPlots show comparable performances for simple LSTM and CNN models. Let's quantify the comparison.\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-stdout}\n```\nMAPE for CNN model is: 0.10994397103786469\nR2 Score for CNN model is: 0.3166595057021674\n```\n:::\n:::\n\n\n# RNN Model Tuning\n\nIn this deep learning tuning part, we will combine tuning of LSTM and CNN models and also several other network types under one category of **RNN Model**. The code will compare pure LSTM, pure CNN, Stacked LSTM, Bidirectional LSTM and CNN-LSTM Models together and select the best performing one.\n\n\n\n::: {.cell cache='true' execution_count=9}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"RNN Model Tuning Code\"}\nimport optuna\nimport warnings\nfrom tensorflow.keras.layers import Bidirectional\nwarnings.filterwarnings(\"ignore\")\n\n# Disable logging\ntf.keras.utils.disable_interactive_logging()\n\n# Define model creation function\ndef create_rnn_model(trial):\n  # Define trial variables\n  model_type = trial.suggest_categorical(\n      \"model_type\",\n      [\"vanilla_lstm\", \"stacked_lstm\", \"bidirectional_lstm\", \"cnn\", \"cnn_lstm\"],\n  )\n  \n  dropout = trial.suggest_categorical(\"dropout\", [True, False])\n  \n  if model_type == \"vanilla_lstm\":\n    # Trial variables\n    units = trial.suggest_int(\"units\", 50, 200)\n    dense_layers = trial.suggest_int(\"dense_layers\", 0, 2)\n    activation = trial.suggest_categorical(\"activation\", [\"relu\", \"tanh\"])\n    optimizer = trial.suggest_categorical(\"optimizer\", [\"Adam\", \"RMSprop\"])\n    \n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.LSTM(units, activation=activation))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n        \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n    \n    \n  elif model_type == \"stacked_lstm\":\n    # Trial variables\n    units = trial.suggest_int(\"units\", 50, 200)\n    dense_layers = trial.suggest_int(\"dense_layers\", 0, 2)\n    lstm_layers = trial.suggest_int(\"lstm_layers\", 2, 3)\n    activation = trial.suggest_categorical(\"activation\", [\"relu\", \"tanh\"])\n    optimizer = trial.suggest_categorical(\"optimizer\", [\"Adam\", \"RMSprop\"])\n    \n    # Define model with trial variables\n    rnn_model = Sequential()\n    \n    for layer in range(lstm_layers):\n      if layer == lstm_layers - 1:\n        rnn_model.add(layers.LSTM(units, activation=activation))\n      else:\n        rnn_model.add(layers.LSTM(units, activation=activation, return_sequences=True))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n    \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n    \n  elif model_type == \"bidirectional_lstm\":\n    # Trial variables\n    units = trial.suggest_int(\"units\", 50, 200)\n    dense_layers = trial.suggest_int(\"dense_layers\", 0, 2)\n    activation = trial.suggest_categorical(\"activation\", [\"relu\", \"tanh\"])\n    optimizer = trial.suggest_categorical(\"optimizer\", [\"Adam\", \"RMSprop\"])\n    \n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(Bidirectional(layers.LSTM(units, activation=activation)))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n    \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n  \n  elif model_type == \"cnn\":\n    # Trial variables\n    units = trial.suggest_int(\"units\", 50, 200)\n    dense_layers = trial.suggest_int(\"dense_layers\", 0, 2)\n    activation = trial.suggest_categorical(\"activation\", [\"relu\", \"tanh\"])\n    optimizer = trial.suggest_categorical(\"optimizer\", [\"Adam\", \"RMSprop\"])\n    \n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.Conv1D(units, 1, activation=activation))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n      \n    rnn_model.add(layers.Flatten())\n    \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n    \n  elif model_type == \"cnn_lstm\":\n    # Trial variables\n    units = trial.suggest_int(\"units\", 50, 200)\n    dense_layers = trial.suggest_int(\"dense_layers\", 0, 2)\n    activation = trial.suggest_categorical(\"activation\", [\"relu\", \"tanh\"])\n    optimizer = trial.suggest_categorical(\"optimizer\", [\"Adam\", \"RMSprop\"])\n    \n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.Conv1D(units, 1, activation=activation))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n    \n    rnn_model.add(layers.LSTM(units, activation=activation))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n    \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n    \n  return rnn_model\n\n\n# Define Optuna Objective\ndef rnn_objective(trial):\n  import tensorflow as tf\n  \n  # Define training variables\n  batch_size = trial.suggest_int(\"batch_size\", 1, 100, log=True)\n  epochs = trial.suggest_int(\"epochs\", 10, 100)\n  \n  # Call model\n  rnn_model = create_rnn_model(trial)\n  \n  # Fit the model\n  rnn_model.fit(lstm_train_features, lstm_train_targets, batch_size, epochs, verbose=0);\n\n  # Forecast for the test data\n  rnn_forecast = rnn_model.predict(lstm_test_features)\n\n  # Create a loop to calculate cumulative cost of the forecast\n  storage = 0\n  cumulative_cost = 0\n  book_price = 20\n  monthly_storage_cost = 100\n  for step in range(len(lstm_test_targets)):\n\n    # Get the cost and difference for storage for the current step\n    cost, to_storage = cost_function(\n      storage, \n      lstm_test_targets[step], \n      rnn_forecast[step][0], \n      book_price, \n      monthly_storage_cost)\n\n    # Add cost to cumulative cost and storage difference to storage\n    cumulative_cost += int(cost)\n    storage += int(to_storage)\n\n  total_cost = cumulative_cost + storage*book_price\n  return total_cost\n\n# Create Optuna Study and Minimize total_cost\nrnn_study = optuna.create_study(direction=\"minimize\", sampler=optuna.samplers.QMCSampler())\nrnn_study.optimize(rnn_objective, n_trials=20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_2 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_3 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_4 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_5 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_6 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_7 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_12 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_13 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_14 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_16 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_17 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_18 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_20 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_20 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_20 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_21 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_22 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_23 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n:::\n\n\n::: {.cell cache='true' execution_count=10}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"RNN Model with Best Parameters\"}\n# Disable logging\ntf.keras.utils.disable_interactive_logging()\n\n# Define best model parameters\nbest_rnn_model_parameters = rnn_study.best_params\nmodel_type = best_rnn_model_parameters[\"model_type\"]\nunits = best_rnn_model_parameters[\"units\"]\nactivation = best_rnn_model_parameters[\"activation\"]\ndense_layers = best_rnn_model_parameters[\"dense_layers\"]\nlstm_layers = best_rnn_model_parameters[\"lstm_layers\"] if \"lstm_layers\" in best_rnn_model_parameters.keys() else 0\noptimizer = best_rnn_model_parameters[\"optimizer\"]\nbatch_size = best_rnn_model_parameters[\"batch_size\"]\nepochs = best_rnn_model_parameters[\"epochs\"]\ndropout = best_rnn_model_parameters[\"dropout\"]\n\ntest_subset = subset[730:1095]\nval_subset = subset[1095:1461]\n\ntest_targets = np.array(test_subset[\"num_sold\"])\ntest_features = np.array(test_subset.drop(columns=[\"num_sold\"])).reshape((test_subset.shape[0], 1, test_subset.shape[1] - 1))\nval_targets = np.array(val_subset[\"num_sold\"])\nval_features = np.array(val_subset.drop(columns=[\"num_sold\"])).reshape((val_subset.shape[0], 1, val_subset.shape[1] - 1))\n\n\nif model_type == \"vanilla_lstm\":\n\n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.LSTM(units, activation=activation))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n        \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n\n\nelif model_type == \"stacked_lstm\":\n\n    # Define model with trial variables\n    rnn_model = Sequential()\n\n    for layer in range(lstm_layers):\n        if layer == lstm_layers - 1:\n            rnn_model.add(layers.LSTM(units, activation=activation))\n        else:\n            rnn_model.add(layers.LSTM(units, activation=activation, return_sequences=True))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n\n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n\n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n\nelif model_type == \"bidirectional_lstm\":\n\n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(Bidirectional(layers.LSTM(units, activation=activation)))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n\n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n\n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n\nelif model_type == \"cnn\":\n\n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.Conv1D(units, 1, activation=activation))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n        \n    rnn_model.add(layers.Flatten())\n    \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n\nelif model_type == \"cnn_lstm\":\n\n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.Conv1D(units, 1, activation=activation))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n\n    rnn_model.add(layers.LSTM(units, activation=activation))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n\n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n\n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n    \n# Fit the model\nrnn_model.fit(test_features,\n              test_targets,\n              batch_size,\n              epochs,\n              verbose=1,\n              validation_data=(val_features, val_targets),\n              callbacks=tf.keras.callbacks.EarlyStopping(patience=7, min_delta=0.1));\n\n# Forecast for the test data\nrnn_forecast = rnn_model.predict(val_features)\n\n# Calculate total cost\nstorage = 0\ncumulative_cost = 0\nbook_price = 20\nmonthly_storage_cost = 100\nfor step in range(len(val_targets)):\n\n    # Get the cost and difference for storage for the current step\n    cost, to_storage = cost_function(\n      storage, \n      val_targets[step], \n      rnn_forecast[step][0], \n      book_price, \n      monthly_storage_cost)\n\n    # Add cost to cumulative cost and storage difference to storage\n    cumulative_cost += int(cost)\n    storage += int(to_storage)\n\nrnn_model_total_cost = cumulative_cost + storage*book_price\n\n# Plot both test data and forecast from the model to compare them visually.\nplot_forecasts(val_targets, rnn_forecast, title=\"Simple LSTM Model Forecasts\");\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"f6d30305-2b4a-48ec-9dfc-4d5552ceb828\" class=\"plotly-graph-div\" style=\"height:500px; width:700px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f6d30305-2b4a-48ec-9dfc-4d5552ceb828\")) {                    Plotly.newPlot(                        \"f6d30305-2b4a-48ec-9dfc-4d5552ceb828\",                        [{\"hovertemplate\":\"=Observed<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Observed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Observed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[142.0,98.0,109.0,102.0,116.0,99.0,83.0,90.0,84.0,91.0,93.0,113.0,78.0,89.0,87.0,88.0,89.0,101.0,101.0,82.0,92.0,88.0,91.0,90.0,102.0,99.0,89.0,88.0,90.0,85.0,89.0,103.0,104.0,87.0,84.0,83.0,86.0,91.0,102.0,97.0,91.0,85.0,87.0,88.0,85.0,92.0,91.0,84.0,83.0,83.0,81.0,82.0,89.0,105.0,83.0,83.0,81.0,76.0,80.0,99.0,86.0,78.0,77.0,70.0,72.0,70.0,86.0,86.0,67.0,75.0,73.0,71.0,73.0,78.0,93.0,69.0,67.0,66.0,74.0,76.0,80.0,92.0,72.0,71.0,69.0,69.0,66.0,76.0,73.0,65.0,72.0,61.0,55.0,56.0,60.0,69.0,55.0,54.0,59.0,58.0,60.0,69.0,71.0,56.0,64.0,64.0,59.0,66.0,74.0,76.0,52.0,55.0,48.0,54.0,55.0,57.0,66.0,57.0,55.0,53.0,55.0,59.0,69.0,75.0,65.0,63.0,67.0,68.0,63.0,67.0,69.0,64.0,56.0,52.0,56.0,62.0,69.0,68.0,57.0,58.0,60.0,58.0,61.0,74.0,75.0,65.0,63.0,61.0,62.0,68.0,65.0,68.0,65.0,63.0,60.0,62.0,70.0,75.0,79.0,63.0,63.0,60.0,69.0,64.0,70.0,70.0,61.0,56.0,60.0,58.0,62.0,75.0,74.0,57.0,65.0,58.0,59.0,59.0,73.0,73.0,60.0,66.0,68.0,65.0,65.0,70.0,77.0,62.0,66.0,67.0,70.0,67.0,69.0,68.0,64.0,65.0,61.0,61.0,68.0,69.0,76.0,56.0,63.0,64.0,59.0,66.0,75.0,76.0,61.0,64.0,65.0,60.0,69.0,76.0,79.0,67.0,66.0,70.0,64.0,64.0,81.0,78.0,70.0,64.0,69.0,70.0,61.0,78.0,78.0,71.0,67.0,77.0,72.0,72.0,71.0,78.0,69.0,73.0,69.0,69.0,67.0,80.0,86.0,66.0,70.0,70.0,72.0,75.0,86.0,83.0,71.0,63.0,72.0,71.0,67.0,81.0,82.0,73.0,65.0,77.0,61.0,81.0,89.0,79.0,69.0,76.0,68.0,76.0,77.0,82.0,91.0,68.0,71.0,71.0,82.0,72.0,90.0,103.0,77.0,80.0,86.0,90.0,86.0,94.0,98.0,78.0,77.0,77.0,84.0,89.0,95.0,102.0,80.0,84.0,84.0,80.0,71.0,81.0,99.0,79.0,76.0,79.0,81.0,86.0,100.0,96.0,76.0,74.0,86.0,82.0,76.0,91.0,100.0,80.0,87.0,80.0,81.0,87.0,97.0,104.0,79.0,76.0,87.0,76.0,86.0,98.0,95.0,76.0,88.0,82.0,83.0,91.0,87.0,90.0,84.0,83.0,83.0,82.0,87.0,85.0,107.0,85.0,80.0,88.0,78.0,86.0,99.0,98.0,86.0,82.0,84.0,89.0,85.0,102.0,90.0,79.0,83.0,87.0,84.0,94.0,122.0,131.0,126.0,157.0,169.0,143.0],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"=Predicted<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Predicted\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Predicted\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[62.29213333129883,63.304813385009766,67.56977844238281,74.01152801513672,87.56975555419922,69.03234100341797,78.32703399658203,76.93976593017578,74.33663940429688,78.70342254638672,87.60064697265625,89.10587310791016,74.7309799194336,73.856689453125,76.04568481445312,74.24542999267578,80.30297088623047,86.62953186035156,87.86811065673828,68.2632064819336,74.70609283447266,73.72734832763672,72.65873718261719,80.14142608642578,85.64234924316406,86.28058624267578,70.65516662597656,74.75243377685547,72.60382843017578,70.2452392578125,77.2083969116211,86.74788665771484,94.61441040039062,78.444580078125,79.76812744140625,77.56808471679688,76.93036651611328,84.56023406982422,89.8253402709961,90.6787109375,72.94100189208984,79.16732025146484,76.36402893066406,78.88511657714844,77.62036895751953,86.86951446533203,88.49470520019531,71.65602111816406,75.1880874633789,71.82719421386719,70.01907348632812,76.02241516113281,83.14869689941406,85.65259552001953,69.21116638183594,71.87147521972656,67.3196792602539,70.67391967773438,74.64014434814453,81.07137298583984,81.27655792236328,68.54084777832031,72.04368591308594,68.31864929199219,65.87708282470703,70.47709655761719,82.74143981933594,85.01739501953125,61.3774528503418,66.53929138183594,68.2492446899414,65.36158752441406,73.65711212158203,76.48983001708984,82.62469482421875,59.18232727050781,66.83702087402344,65.3934555053711,62.2072868347168,66.1935806274414,76.82262420654297,80.29235076904297,57.245567321777344,66.85340118408203,64.40846252441406,60.043758392333984,69.58596801757812,77.84031677246094,80.34793853759766,56.49402618408203,65.17321014404297,59.096595764160156,68.19337463378906,72.01570129394531,77.83345794677734,80.24950408935547,58.71107864379883,54.31370162963867,52.47858810424805,48.74040985107422,63.56409454345703,67.70844268798828,70.11648559570312,58.889678955078125,48.87712860107422,52.28726577758789,50.02324676513672,72.5350570678711,80.03797912597656,81.66109466552734,60.156944274902344,67.3711929321289,66.68466186523438,65.85637664794922,74.23682403564453,80.68692016601562,81.60342407226562,65.41128540039062,55.594207763671875,53.56415557861328,51.24253845214844,53.18526077270508,64.45632934570312,67.92683410644531,39.832252502441406,59.747982025146484,59.079750061035156,64.08329010009766,67.82655334472656,73.97846984863281,77.78864288330078,58.86588668823242,61.64754867553711,64.77243041992188,58.30426025390625,66.51276397705078,73.60547637939453,79.12150573730469,41.07743835449219,44.08005905151367,42.09245681762695,52.99613571166992,48.8901481628418,58.33159255981445,66.76509857177734,55.80377197265625,57.12324905395508,60.72468566894531,59.76729202270508,48.007354736328125,56.07799530029297,63.66585159301758,42.23239517211914,49.317665100097656,47.06493377685547,42.850738525390625,62.27349090576172,71.1071548461914,79.11830139160156,55.93020248413086,57.944671630859375,56.947757720947266,59.07655334472656,61.74224090576172,74.0164566040039,72.47513580322266,51.80031204223633,55.18162536621094,56.60912322998047,55.12480163574219,57.32939529418945,65.90440368652344,71.7449722290039,46.63994216918945,51.55805587768555,55.02452850341797,52.13681411743164,53.430572509765625,67.58148956298828,71.31694793701172,44.74622344970703,48.50487518310547,43.0786018371582,53.090370178222656,57.320892333984375,64.04534912109375,66.8694839477539,40.43752670288086,52.71726989746094,50.44548797607422,46.23975372314453,52.06513977050781,65.15288543701172,67.50225067138672,45.67058181762695,44.64080047607422,47.87434768676758,45.05029296875,53.75558853149414,63.34443664550781,65.3449935913086,37.51398849487305,46.48289108276367,45.388553619384766,44.09803771972656,54.87102508544922,63.26375961303711,64.4318618774414,42.82048416137695,49.04056167602539,46.923377990722656,44.5073356628418,54.04619598388672,54.65992736816406,69.53657531738281,42.791015625,46.047447204589844,43.7036018371582,43.24466323852539,55.697242736816406,64.77986145019531,66.7850341796875,40.84105682373047,50.71987533569336,47.89763259887695,51.865535736083984,51.0455436706543,65.29106140136719,68.448486328125,45.80971145629883,51.559295654296875,48.28982925415039,46.704246520996094,55.361454010009766,65.45230102539062,69.64124298095703,49.310699462890625,53.59088134765625,48.996158599853516,53.65189743041992,59.32039260864258,67.88217163085938,70.85659790039062,49.65312957763672,48.704227447509766,58.6812744140625,57.36845779418945,60.14781188964844,68.41080474853516,72.85509490966797,54.63340759277344,59.22200012207031,55.461387634277344,55.31435775756836,63.86561584472656,71.12234497070312,78.63080596923828,49.05647659301758,58.81029510498047,56.307289123535156,58.543025970458984,63.41728591918945,70.33771514892578,73.6921615600586,51.827980041503906,57.36579895019531,55.92792510986328,59.98531723022461,63.511592864990234,69.37543487548828,77.39598846435547,53.871944427490234,58.07391357421875,38.55608367919922,40.35819625854492,57.30289840698242,73.80402374267578,67.77891540527344,39.69468307495117,46.070762634277344,66.90227508544922,65.42782592773438,67.59288787841797,76.17765808105469,81.96731567382812,58.54230880737305,67.5993423461914,60.617313385009766,63.6761360168457,67.02175903320312,77.64141845703125,80.7869644165039,56.36738204956055,60.850521087646484,62.1632194519043,61.56260299682617,66.0749282836914,78.39334106445312,80.58722686767578,54.94951629638672,65.12256622314453,64.15965270996094,62.45183563232422,65.8112564086914,77.4028091430664,75.82421112060547,62.38001251220703,66.7119140625,63.277408599853516,61.41761779785156,66.68144226074219,80.13469696044922,82.9688949584961,58.96821975708008,64.71308135986328,67.09109497070312,64.82595825195312,73.57988739013672,76.892333984375,83.36425018310547,60.90740203857422,68.84587097167969,67.95504760742188,65.37811279296875,69.81183624267578,80.14230346679688,83.8448486328125,62.87324142456055,72.27497100830078,70.38851165771484,67.01790618896484,76.10521697998047,83.69820404052734,86.28800964355469,65.52970123291016,68.64604949951172,76.84967803955078,76.10225677490234,78.24683380126953,84.6250228881836,88.05524444580078,74.96751403808594,78.54239654541016,76.1183090209961,76.310546875,82.69469451904297,87.9701919555664,93.27916717529297,72.92578887939453,80.14427947998047,78.64204406738281,80.5688705444336,84.10748291015625,88.93558502197266,91.49276733398438,77.05687713623047,68.77326965332031,67.88207244873047,71.67958068847656,81.36530303955078,85.96290588378906,86.75299835205078,67.7102279663086,71.57344055175781,69.51240539550781,72.21856689453125],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"index\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Sales\"}},\"legend\":{\"title\":{\"text\":\"\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Simple LSTM Model Forecasts\"},\"height\":500,\"width\":700},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('f6d30305-2b4a-48ec-9dfc-4d5552ceb828');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n\n::: {.cell-output .cell-output-stdout}\n```\nModel Type of the Tuned RNN Model: bidirectional_lstm\n\nMAPE for Tuned RNN Model is: 0.16543614864349365\nR2 Score for Tuned RNN Model is: -0.19266240917966937\n\nTotal Cost for Tuned RNN Model is: €84,989.00\n```\n:::\n:::\n\n\n# Results and Conclusion\n\n\n\nWe have tuned all models and calculated the total costs in terms of our cost function and the winner is **XGBoost**! XGBoost's performance is not surprising given that it is usually the winning model for competitions but STL-ARIMA has also performed very successfully. RNN models were, for me, somewhat disappointing; however, it should be stated that we didn't fully utilized LSTM cells' memory because we have only used one timestep in the input. Increasing timesteps could potentially improve its performance. ARIMAX was the worst performer even with tuning. It could be because of the feature matrix that we have created couldn't fully capture seasonality and trend.\n\nEven though we have added calendar features, they might not be enough to predict seasonality and trend. Therefore, a decomposition model where a model similar to STL decompose the time series to trend, seasonality, and residuals and after that a seperate regression model trained on only residuals could potentially be more accurate; but that's all for this post.\n\n**Thank you for reading this post and see you on the next one!**\n\n",
    "supporting": [
      "book_sales_forecasting_deep_learning_part_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.16.1.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        \n"
      ]
    }
  }
}