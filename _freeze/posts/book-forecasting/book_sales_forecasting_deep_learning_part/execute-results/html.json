{
  "hash": "7dbc2863dffc0c84af6bead328cf9fe8",
  "result": {
    "markdown": "---\ntitle: 'Book Sales Forecasting: Comparison of Different Models Part 2'\ndescription: Deep Learning Models\ndate: '2022-11-27'\nimage: images/forecast.png\ncategories:\n  - python\n  - time series forecasting\n  - tensorflow\n  - optuna\n  - hyperparameter tuning\nexecute:\n  freeze: true\nhighlight-style: breezedark\ntoc: true\nnumber-sections: true\n---\n\n# Introduction\n\nThis post is the continuation of the [book sales forecasting case](/posts/book-forecasting/book_sales_forecasting.html). In this second part we will create deep learning models and hyperparameter tuning according to the assumed business case on Part 1.\n    \n# Deep Learning\n\nNow we will create the forecasts with deep learning methods - LSTM and CNN. For these models we have to change feature and target DataFrames to Numpy arrays, and reshape features to 3 dimensional shape of (samples, timesteps, features). After creating a base model for both of them and comparing visually by plotting test features with forecasts, we will create our custom function in the next section and do hyperparameter tuning.\n\n## LSTM\n\n\n\nFirstly, we will create a simple network.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"false\" code-summary=\"Simple LSTM Network\"}\nimport tensorflow as tf\nfrom tensorflow.keras import layers, Sequential\n\n# Disable logging\ntf.keras.utils.disable_interactive_logging()\n\nwindow_size = 7\n\n# Create train and test data for LSTM\nlstm_train_features = np.array(train_features)\nlstm_train_targets = np.array(train_targets)\n\nlstm_test_features = np.array(test_features)\nlstm_test_targets = np.array(test_targets)\n\n# Reshape train and test features suitable fo RNN\nlstm_train_features = lstm_train_features.reshape((lstm_train_features.shape[0], 1, lstm_train_features.shape[1]))\n\nlstm_test_features = lstm_test_features.reshape((lstm_test_features.shape[0], 1, lstm_test_features.shape[1]))\n\n# Implement LSTM\nlstm_model = Sequential()\nlstm_model.add(layers.LSTM(50, activation=\"relu\"))\nlstm_model.add(layers.Dense(1))\nlstm_model.compile(loss=\"mape\", optimizer=\"Adam\")\n\n# Fit and Forecast\nlstm_model.fit(lstm_train_features, lstm_train_targets, 1, 5, verbose=0)\nlstm_forecast = lstm_model.predict(lstm_test_features)\n```\n:::\n\n\n::: {.cell cache='true' execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\nMetal device set to: Apple M1\nWARNING:tensorflow:Layer lstm will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"7c1f609e-92f4-406d-a6e8-26d2c45a980f\" class=\"plotly-graph-div\" style=\"height:500px; width:700px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"7c1f609e-92f4-406d-a6e8-26d2c45a980f\")) {                    Plotly.newPlot(                        \"7c1f609e-92f4-406d-a6e8-26d2c45a980f\",                        [{\"hovertemplate\":\"=Observed<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Observed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Observed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[142.0,98.0,109.0,102.0,116.0,99.0,83.0,90.0,84.0,91.0,93.0,113.0,78.0,89.0,87.0,88.0,89.0,101.0,101.0,82.0,92.0,88.0,91.0,90.0,102.0,99.0,89.0,88.0,90.0,85.0,89.0,103.0,104.0,87.0,84.0,83.0,86.0,91.0,102.0,97.0,91.0,85.0,87.0,88.0,85.0,92.0,91.0,84.0,83.0,83.0,81.0,82.0,89.0,105.0,83.0,83.0,81.0,76.0,80.0,99.0,86.0,78.0,77.0,70.0,72.0,70.0,86.0,86.0,67.0,75.0,73.0,71.0,73.0,78.0,93.0,69.0,67.0,66.0,74.0,76.0,80.0,92.0,72.0,71.0,69.0,69.0,66.0,76.0,73.0,65.0,72.0,61.0,55.0,56.0,60.0,69.0,55.0,54.0,59.0,58.0,60.0,69.0,71.0,56.0,64.0,64.0,59.0,66.0,74.0,76.0,52.0,55.0,48.0,54.0,55.0,57.0,66.0,57.0,55.0,53.0,55.0,59.0,69.0,75.0,65.0,63.0,67.0,68.0,63.0,67.0,69.0,64.0,56.0,52.0,56.0,62.0,69.0,68.0,57.0,58.0,60.0,58.0,61.0,74.0,75.0,65.0,63.0,61.0,62.0,68.0,65.0,68.0,65.0,63.0,60.0,62.0,70.0,75.0,79.0,63.0,63.0,60.0,69.0,64.0,70.0,70.0,61.0,56.0,60.0,58.0,62.0,75.0,74.0,57.0,65.0,58.0,59.0,59.0,73.0,73.0,60.0,66.0,68.0,65.0,65.0,70.0,77.0,62.0,66.0,67.0,70.0,67.0,69.0,68.0,64.0,65.0,61.0,61.0,68.0,69.0,76.0,56.0,63.0,64.0,59.0,66.0,75.0,76.0,61.0,64.0,65.0,60.0,69.0,76.0,79.0,67.0,66.0,70.0,64.0,64.0,81.0,78.0,70.0,64.0,69.0,70.0,61.0,78.0,78.0,71.0,67.0,77.0,72.0,72.0,71.0,78.0,69.0,73.0,69.0,69.0,67.0,80.0,86.0,66.0,70.0,70.0,72.0,75.0,86.0,83.0,71.0,63.0,72.0,71.0,67.0,81.0,82.0,73.0,65.0,77.0,61.0,81.0,89.0,79.0,69.0,76.0,68.0,76.0,77.0,82.0,91.0,68.0,71.0,71.0,82.0,72.0,90.0,103.0,77.0,80.0,86.0,90.0,86.0,94.0,98.0,78.0,77.0,77.0,84.0,89.0,95.0,102.0,80.0,84.0,84.0,80.0,71.0,81.0,99.0,79.0,76.0,79.0,81.0,86.0,100.0,96.0,76.0,74.0,86.0,82.0,76.0,91.0,100.0,80.0,87.0,80.0,81.0,87.0,97.0,104.0,79.0,76.0,87.0,76.0,86.0,98.0,95.0,76.0,88.0,82.0,83.0,91.0,87.0,90.0,84.0,83.0,83.0,82.0,87.0,85.0,107.0,85.0,80.0,88.0,78.0,86.0,99.0,98.0,86.0,82.0,84.0,89.0,85.0,102.0,90.0,79.0,83.0,87.0,84.0,94.0,122.0,131.0,126.0,157.0,169.0,143.0],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"=Predicted<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Predicted\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Predicted\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[76.53011322021484,64.69878387451172,69.89448547363281,76.9672622680664,104.4306411743164,80.34725189208984,86.65019226074219,86.68470001220703,85.55055236816406,89.24820709228516,96.7008285522461,101.89249420166016,81.33949279785156,83.18096160888672,82.47649383544922,84.62217712402344,88.3222885131836,97.88214874267578,101.10958099365234,79.6385269165039,82.83023071289062,84.88627624511719,83.36681365966797,88.6441650390625,93.90929412841797,102.16583251953125,76.94718170166016,83.61197662353516,84.29663848876953,84.60472106933594,86.12213134765625,94.49714660644531,108.02436065673828,86.28582000732422,88.92435455322266,88.57106018066406,87.7213363647461,91.90511322021484,99.74779510498047,103.8891830444336,80.33744049072266,83.93820190429688,82.84654235839844,85.54071807861328,85.3316879272461,92.63098907470703,99.850830078125,76.51722717285156,82.448486328125,79.54606628417969,81.54061889648438,82.69085693359375,92.76460266113281,96.57421875,74.9648666381836,76.74468231201172,78.91522216796875,77.64173889160156,82.28933715820312,91.19856262207031,93.292724609375,77.77574920654297,83.98099517822266,82.23839569091797,81.96702575683594,84.13919067382812,93.39674377441406,99.0561294555664,74.03642272949219,78.97850036621094,78.04385375976562,77.52775573730469,83.32133483886719,88.34918975830078,93.55738830566406,72.08097839355469,77.19441223144531,78.7361068725586,76.39957427978516,81.55226135253906,87.96988677978516,95.98228454589844,71.34803009033203,78.11628723144531,75.54266357421875,78.37760925292969,80.31732940673828,90.44602966308594,97.24901580810547,74.71928405761719,77.93598937988281,72.64949035644531,80.84785461425781,85.92057037353516,92.56101989746094,98.3900375366211,75.11325073242188,60.27556228637695,60.39036560058594,59.095542907714844,83.59056854248047,70.81201171875,76.13624572753906,76.42185974121094,58.065399169921875,57.58051300048828,60.15224838256836,84.54712677001953,94.17997741699219,97.74891662597656,77.30854797363281,80.30787658691406,82.87792205810547,81.9137954711914,87.58782958984375,92.9166030883789,101.5572280883789,77.8092041015625,64.51776123046875,65.59688568115234,66.25788116455078,75.19901275634766,71.83426666259766,79.295654296875,54.50465393066406,78.99349975585938,78.49529266357422,79.96041107177734,83.2397689819336,89.97714233398438,95.9771499633789,72.55192565917969,76.02649688720703,79.03782653808594,76.09725952148438,78.82547760009766,88.92579650878906,95.11486053466797,53.0477409362793,55.34215545654297,57.222835540771484,75.97479248046875,61.32318115234375,68.09194946289062,75.825439453125,69.79872131347656,76.489501953125,74.9844741821289,77.0523681640625,61.025020599365234,69.43234252929688,73.4178466796875,62.11586380004883,55.159751892089844,56.109432220458984,54.28770065307617,77.79175567626953,85.07795715332031,91.82389068603516,68.7254409790039,71.47053527832031,71.48187255859375,70.62874603271484,72.8317642211914,83.48416900634766,86.1128158569336,62.45308303833008,68.36385345458984,68.67259979248047,69.9842300415039,70.41277313232422,80.39649200439453,84.4875259399414,63.48440933227539,66.06725311279297,68.04255676269531,65.32890319824219,70.80130767822266,77.3546142578125,84.9298095703125,62.69069290161133,67.54129791259766,60.18741226196289,68.25041198730469,73.06227111816406,79.40393829345703,85.1732406616211,61.099281311035156,67.02152252197266,66.9945068359375,65.7382583618164,69.20238494873047,76.45600128173828,81.57400512695312,61.128047943115234,62.896820068359375,62.37274169921875,64.3491439819336,68.21807098388672,77.76995849609375,81.1971664428711,60.13428497314453,63.418975830078125,65.80358123779297,64.52054595947266,70.05841064453125,75.65311431884766,84.18301391601562,59.70703887939453,66.57347869873047,67.7770767211914,68.68366241455078,70.65987396240234,70.19085693359375,84.42141723632812,63.144107818603516,66.50709533691406,66.7274169921875,66.52069854736328,71.37982940673828,79.88397979736328,84.69495391845703,61.91350555419922,66.1922607421875,65.75983428955078,69.13025665283203,69.72212982177734,77.69459533691406,85.63743591308594,63.19538116455078,69.63777923583984,67.43464660644531,70.10359191894531,72.09598541259766,82.8377456665039,87.37371826171875,66.60407257080078,68.85466003417969,71.60667419433594,70.82189178466797,76.24651336669922,85.6947021484375,92.27455139160156,67.82782745361328,65.52019500732422,73.85134887695312,75.99925994873047,77.80303192138672,86.17443084716797,91.64268493652344,69.89237213134766,74.69538879394531,73.44967651367188,74.14212036132812,76.6912612915039,84.23739624023438,93.11402130126953,67.09131622314453,71.2874755859375,73.16542053222656,73.99840545654297,78.66858673095703,84.40769958496094,92.36576080322266,67.74297332763672,74.63050842285156,73.17583465576172,75.57289123535156,75.9623794555664,86.69021606445312,91.24234771728516,70.03742980957031,75.58255767822266,54.71681213378906,54.76298141479492,67.27558898925781,97.9007339477539,81.2615966796875,56.57695388793945,61.417850494384766,83.558349609375,83.66365814208984,85.56917572021484,93.90103149414062,98.87057495117188,75.05059814453125,82.30836486816406,79.3057632446289,79.04979705810547,84.00239562988281,92.65599060058594,99.79399871826172,74.2346420288086,80.84672546386719,79.32283020019531,81.81121063232422,83.45549774169922,93.83238220214844,96.92842864990234,76.45406341552734,79.64134216308594,81.63842010498047,82.9450454711914,86.73306274414062,93.54080963134766,91.0379867553711,76.06201934814453,82.44988250732422,80.94511413574219,81.35630798339844,84.05125427246094,93.72322082519531,99.86878967285156,75.56519317626953,80.67900085449219,80.09878540039062,79.89006805419922,86.22813415527344,91.71659851074219,97.48178100585938,76.37301635742188,81.83487701416016,83.51044464111328,81.60359954833984,87.33299255371094,94.35688781738281,102.87330627441406,78.64452362060547,85.69766998291016,83.3965835571289,86.52983093261719,88.87549591064453,99.39961242675781,106.7386474609375,84.73846435546875,77.87834167480469,86.21508026123047,88.75615692138672,90.76439666748047,99.40542602539062,105.14591217041016,83.99673461914062,88.87800598144531,88.03264617919922,89.04481506347656,91.91512298583984,99.7825927734375,108.93331909179688,83.61720275878906,87.98058319091797,90.15215301513672,91.4300537109375,96.37671661376953,102.46048736572266,110.86412048339844,86.93492126464844,73.31758117675781,72.28598022460938,74.78209686279297,96.6628646850586,107.99716186523438,92.1595687866211,70.33860778808594,77.04011535644531,77.72333526611328,76.37171173095703],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"index\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Sales\"}},\"legend\":{\"title\":{\"text\":\"\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Simple LSTM Model Forecasts\"},\"height\":500,\"width\":700},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('7c1f609e-92f4-406d-a6e8-26d2c45a980f');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n\n\nFor easier comparison we will compute the previous benchmarks again.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"LSTM Benchmark Scores\"}\nprint(f\"MAPE for LSTM model is: {mean_absolute_percentage_error(lstm_test_targets, lstm_forecast)}\")\nprint(f\"R2 Score for LSTM model is: {r2_score(lstm_test_targets, lstm_forecast)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMAPE for LSTM model is: 0.11236970126628876\nR2 Score for LSTM model is: 0.25165724866292205\n```\n:::\n:::\n\n\nNow let's create a simple CNN network and plot its forecasts.\n\n## CNN\n\n::: {.cell cache='true' execution_count=6}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Simple CNN Model\"}\n# Disable logging\ntf.keras.utils.disable_interactive_logging()\n\n# Create train and test data for CNN\ncnn_train_features = np.array(train_features)\ncnn_train_targets = np.array(train_targets)\n\ncnn_test_features = np.array(test_features)\ncnn_test_targets = np.array(test_targets)\n\n# Reshape train and test features suitable fo RNN\ncnn_train_features = cnn_train_features.reshape((cnn_train_features.shape[0], 1, cnn_train_features.shape[1]))\ncnn_test_features = cnn_test_features.reshape((cnn_test_features.shape[0], 1, cnn_test_features.shape[1]))\n\n# Implement CNN\ncnn_model = Sequential()\ncnn_model.add(layers.Conv1D(50, 1, activation=\"relu\"))\ncnn_model.add(layers.Flatten())\ncnn_model.add(layers.Dense(1))\ncnn_model.compile(loss=\"mape\", optimizer=\"Adam\")\n\n# Fit and Forecast\ncnn_model.fit(cnn_train_features, cnn_train_targets, 1, 5, verbose=0);\ncnn_forecast = cnn_model.predict(cnn_test_features)\n\n# Plot both test data and forecast from the model to compare them visually.\nplot_forecasts(cnn_test_targets, cnn_forecast, title=\"Simple CNN Model Forecasts\");\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"98a85118-cf38-4d93-bf74-97108b032184\" class=\"plotly-graph-div\" style=\"height:500px; width:700px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"98a85118-cf38-4d93-bf74-97108b032184\")) {                    Plotly.newPlot(                        \"98a85118-cf38-4d93-bf74-97108b032184\",                        [{\"hovertemplate\":\"=Observed<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Observed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Observed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[142.0,98.0,109.0,102.0,116.0,99.0,83.0,90.0,84.0,91.0,93.0,113.0,78.0,89.0,87.0,88.0,89.0,101.0,101.0,82.0,92.0,88.0,91.0,90.0,102.0,99.0,89.0,88.0,90.0,85.0,89.0,103.0,104.0,87.0,84.0,83.0,86.0,91.0,102.0,97.0,91.0,85.0,87.0,88.0,85.0,92.0,91.0,84.0,83.0,83.0,81.0,82.0,89.0,105.0,83.0,83.0,81.0,76.0,80.0,99.0,86.0,78.0,77.0,70.0,72.0,70.0,86.0,86.0,67.0,75.0,73.0,71.0,73.0,78.0,93.0,69.0,67.0,66.0,74.0,76.0,80.0,92.0,72.0,71.0,69.0,69.0,66.0,76.0,73.0,65.0,72.0,61.0,55.0,56.0,60.0,69.0,55.0,54.0,59.0,58.0,60.0,69.0,71.0,56.0,64.0,64.0,59.0,66.0,74.0,76.0,52.0,55.0,48.0,54.0,55.0,57.0,66.0,57.0,55.0,53.0,55.0,59.0,69.0,75.0,65.0,63.0,67.0,68.0,63.0,67.0,69.0,64.0,56.0,52.0,56.0,62.0,69.0,68.0,57.0,58.0,60.0,58.0,61.0,74.0,75.0,65.0,63.0,61.0,62.0,68.0,65.0,68.0,65.0,63.0,60.0,62.0,70.0,75.0,79.0,63.0,63.0,60.0,69.0,64.0,70.0,70.0,61.0,56.0,60.0,58.0,62.0,75.0,74.0,57.0,65.0,58.0,59.0,59.0,73.0,73.0,60.0,66.0,68.0,65.0,65.0,70.0,77.0,62.0,66.0,67.0,70.0,67.0,69.0,68.0,64.0,65.0,61.0,61.0,68.0,69.0,76.0,56.0,63.0,64.0,59.0,66.0,75.0,76.0,61.0,64.0,65.0,60.0,69.0,76.0,79.0,67.0,66.0,70.0,64.0,64.0,81.0,78.0,70.0,64.0,69.0,70.0,61.0,78.0,78.0,71.0,67.0,77.0,72.0,72.0,71.0,78.0,69.0,73.0,69.0,69.0,67.0,80.0,86.0,66.0,70.0,70.0,72.0,75.0,86.0,83.0,71.0,63.0,72.0,71.0,67.0,81.0,82.0,73.0,65.0,77.0,61.0,81.0,89.0,79.0,69.0,76.0,68.0,76.0,77.0,82.0,91.0,68.0,71.0,71.0,82.0,72.0,90.0,103.0,77.0,80.0,86.0,90.0,86.0,94.0,98.0,78.0,77.0,77.0,84.0,89.0,95.0,102.0,80.0,84.0,84.0,80.0,71.0,81.0,99.0,79.0,76.0,79.0,81.0,86.0,100.0,96.0,76.0,74.0,86.0,82.0,76.0,91.0,100.0,80.0,87.0,80.0,81.0,87.0,97.0,104.0,79.0,76.0,87.0,76.0,86.0,98.0,95.0,76.0,88.0,82.0,83.0,91.0,87.0,90.0,84.0,83.0,83.0,82.0,87.0,85.0,107.0,85.0,80.0,88.0,78.0,86.0,99.0,98.0,86.0,82.0,84.0,89.0,85.0,102.0,90.0,79.0,83.0,87.0,84.0,94.0,122.0,131.0,126.0,157.0,169.0,143.0],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"=Predicted<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Predicted\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Predicted\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[79.90837860107422,74.36846160888672,78.41361236572266,86.03778076171875,104.85387420654297,83.5852279663086,87.44857025146484,88.69799041748047,87.04027557373047,89.34648132324219,98.42143249511719,103.75325775146484,83.50023651123047,84.66834259033203,82.80389404296875,86.63855743408203,88.73138427734375,98.41935729980469,101.83409881591797,81.49162292480469,84.13191986083984,85.12667083740234,83.71785736083984,88.45548248291016,93.54377746582031,102.82752227783203,79.59243774414062,83.80502319335938,83.5782241821289,84.24220275878906,85.7756118774414,94.89185333251953,109.21788787841797,87.36131286621094,89.15487670898438,87.65328216552734,88.65135955810547,91.13511657714844,100.64231872558594,104.3593521118164,81.01692962646484,84.03031921386719,84.06451416015625,86.07637023925781,85.83937072753906,92.87266540527344,100.91719055175781,78.16227722167969,82.18938446044922,80.11768341064453,82.04117584228516,84.04081726074219,93.05340576171875,96.81322479248047,76.36544799804688,76.5328598022461,80.24087524414062,79.37316131591797,82.57892608642578,90.96380615234375,94.82894134521484,81.15473937988281,85.35388946533203,83.72123718261719,82.83678436279297,86.4184799194336,94.2186279296875,101.10005187988281,77.60358428955078,80.38652801513672,80.33422088623047,80.6220932006836,85.39726257324219,90.50540161132812,94.92356872558594,76.33948516845703,79.53115844726562,80.42514038085938,78.75652313232422,83.6511001586914,90.7577896118164,97.62840270996094,74.05052185058594,79.83173370361328,76.95712280273438,80.8558349609375,83.22308349609375,91.7433853149414,97.99411010742188,77.26616668701172,79.2119140625,72.28165435791016,81.24602508544922,85.45499420166016,92.58525085449219,96.96966552734375,75.63227844238281,65.38007354736328,66.41141510009766,64.78263092041016,82.9148178100586,76.7793197631836,82.18726348876953,77.08353424072266,63.79835891723633,61.810325622558594,66.31585693359375,83.180908203125,92.8082046508789,96.45814514160156,76.39446258544922,79.64132690429688,80.7852554321289,79.56098937988281,85.2503890991211,90.28720092773438,99.5344467163086,77.19200134277344,67.39993286132812,67.30499267578125,68.77064514160156,74.90007781982422,77.3176040649414,83.98490142822266,60.32188034057617,77.17305755615234,77.25007629394531,77.77326965332031,82.4944076538086,88.93598175048828,93.92138671875,71.75629425048828,75.20440673828125,76.64604949951172,74.3677978515625,75.92532348632812,88.18202209472656,92.76311492919922,56.74654769897461,58.51007843017578,59.806312561035156,74.47866821289062,63.6356315612793,70.54410552978516,78.08511352539062,66.1738052368164,73.6682357788086,72.44892883300781,73.3579330444336,62.0745964050293,71.2778549194336,75.35933685302734,62.687957763671875,60.302181243896484,60.020172119140625,58.829978942871094,74.39520263671875,83.86408996582031,89.15314483642578,68.01567840576172,69.40878295898438,68.35396575927734,68.32034301757812,71.25526428222656,81.26463317871094,83.90765380859375,60.47772979736328,67.18215942382812,66.266357421875,67.12145233154297,67.98614501953125,77.98057556152344,82.36546325683594,61.66007995605469,63.41962814331055,65.23619842529297,62.07349395751953,68.77494049072266,76.15106964111328,82.15924072265625,60.38361358642578,64.71495819091797,58.660003662109375,67.31655883789062,71.16059112548828,77.86673736572266,82.0916519165039,61.272216796875,64.62390899658203,66.17216491699219,64.97798156738281,67.03160095214844,75.25553894042969,80.96138763427734,61.249515533447266,61.92205810546875,61.25156021118164,64.44944763183594,67.29105377197266,76.5833511352539,80.3055648803711,60.56245803833008,63.32204818725586,65.01985931396484,63.915828704833984,68.89794158935547,74.34090423583984,84.08614349365234,61.44100570678711,65.65458679199219,66.53951263427734,67.89207458496094,70.10189819335938,70.77838897705078,85.35018920898438,64.57909393310547,66.64424133300781,66.17981719970703,67.6286392211914,70.97074127197266,80.82223510742188,85.61339569091797,62.9797248840332,66.6629867553711,67.3483657836914,69.97528076171875,70.59037780761719,78.09431457519531,87.11493682861328,65.22029876708984,69.89665985107422,68.30441284179688,70.84710693359375,73.54862976074219,83.29894256591797,87.7020263671875,67.68148040771484,68.54839324951172,72.84246826171875,72.50421142578125,76.29877471923828,85.31721496582031,91.941162109375,69.16310119628906,67.01829528808594,76.0143814086914,77.36397552490234,79.12471771240234,86.46228790283203,93.25531005859375,71.3753890991211,76.4241714477539,75.43231964111328,74.7457275390625,77.89454650878906,86.49864959716797,94.23493194580078,69.54647827148438,72.09489440917969,75.37126159667969,75.18067169189453,79.21894836425781,85.71565246582031,93.22745513916016,70.52269744873047,75.38057708740234,74.05883026123047,75.92645263671875,75.90287780761719,88.2113037109375,92.69335174560547,71.38076782226562,75.16526794433594,59.87599182128906,60.63645553588867,72.61359405517578,97.66358947753906,86.65254974365234,62.40449142456055,67.260009765625,82.84247589111328,84.45462036132812,85.98542022705078,93.282470703125,98.65914916992188,76.8211669921875,82.32367706298828,79.6579818725586,78.89899444580078,84.7301254272461,92.66690826416016,99.03668212890625,75.1278076171875,80.64075469970703,79.9924545288086,81.54881286621094,82.9216537475586,93.01997375488281,95.60599517822266,77.60301208496094,80.20661163330078,80.99198913574219,81.73026275634766,85.6297836303711,92.918701171875,91.106201171875,77.78013610839844,82.28897857666016,81.12779235839844,80.4160385131836,84.59071350097656,92.95747375488281,100.2553939819336,77.07523345947266,79.80517578125,80.1458511352539,80.83663940429688,86.16722106933594,92.02307891845703,96.87987518310547,78.11644744873047,81.53782653808594,82.96318054199219,81.61748504638672,87.04895782470703,94.84867095947266,102.61125183105469,78.98311614990234,84.99186706542969,82.18376922607422,86.76051330566406,89.48114776611328,99.1003646850586,105.86642456054688,84.6015853881836,77.18547058105469,86.15007019042969,88.08566284179688,90.13359832763672,97.98810577392578,105.4246826171875,83.18267059326172,89.33885955810547,87.23989868164062,87.3905258178711,90.97476959228516,100.01587677001953,108.59786224365234,83.84049224853516,86.88326263427734,90.24285888671875,90.2745361328125,94.80187225341797,101.91667175292969,110.44451141357422,87.33109283447266,78.76617431640625,76.77175903320312,79.74146270751953,94.86475372314453,107.86621856689453,98.35928344726562,76.56954193115234,81.14266967773438,81.48512268066406,81.02072143554688],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"index\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Sales\"}},\"legend\":{\"title\":{\"text\":\"\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Simple CNN Model Forecasts\"},\"height\":500,\"width\":700},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('98a85118-cf38-4d93-bf74-97108b032184');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\nPlots show comparable performances for simple LSTM and CNN models. Let's quantify the comparison.\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-stdout}\n```\nMAPE for CNN model is: 0.10711897164583206\nR2 Score for CNN model is: 0.34101557513257685\n```\n:::\n:::\n\n\n# RNN Model Tuning\n\nIn this deep learning tuning part, we will combine tuning of LSTM and CNN models and also several other network types under one category of **RNN Model**. The code will compare pure LSTM, pure CNN, Stacked LSTM, Bidirectional LSTM and CNN-LSTM Models together and select the best performing one.\n\n\n\n::: {.cell cache='true' execution_count=9}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"RNN Model Tuning Code\"}\nimport optuna\nimport warnings\nfrom tensorflow.keras.layers import Bidirectional\nwarnings.filterwarnings(\"ignore\")\n\n# Disable logging\ntf.keras.utils.disable_interactive_logging()\n\n# Define model creation function\ndef create_rnn_model(trial):\n  # Define trial variables\n  model_type = trial.suggest_categorical(\n      \"model_type\",\n      [\"vanilla_lstm\", \"stacked_lstm\", \"bidirectional_lstm\", \"cnn\", \"cnn_lstm\"],\n  )\n  \n  dropout = trial.suggest_categorical(\"dropout\", [True, False])\n  \n  if model_type == \"vanilla_lstm\":\n    # Trial variables\n    units = trial.suggest_int(\"units\", 50, 200)\n    dense_layers = trial.suggest_int(\"dense_layers\", 0, 2)\n    activation = trial.suggest_categorical(\"activation\", [\"relu\", \"tanh\"])\n    optimizer = trial.suggest_categorical(\"optimizer\", [\"Adam\", \"RMSprop\"])\n    \n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.LSTM(units, activation=activation))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n        \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n    \n    \n  elif model_type == \"stacked_lstm\":\n    # Trial variables\n    units = trial.suggest_int(\"units\", 50, 200)\n    dense_layers = trial.suggest_int(\"dense_layers\", 0, 2)\n    lstm_layers = trial.suggest_int(\"lstm_layers\", 2, 3)\n    activation = trial.suggest_categorical(\"activation\", [\"relu\", \"tanh\"])\n    optimizer = trial.suggest_categorical(\"optimizer\", [\"Adam\", \"RMSprop\"])\n    \n    # Define model with trial variables\n    rnn_model = Sequential()\n    \n    for layer in range(lstm_layers):\n      if layer == lstm_layers - 1:\n        rnn_model.add(layers.LSTM(units, activation=activation))\n      else:\n        rnn_model.add(layers.LSTM(units, activation=activation, return_sequences=True))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n    \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n    \n  elif model_type == \"bidirectional_lstm\":\n    # Trial variables\n    units = trial.suggest_int(\"units\", 50, 200)\n    dense_layers = trial.suggest_int(\"dense_layers\", 0, 2)\n    activation = trial.suggest_categorical(\"activation\", [\"relu\", \"tanh\"])\n    optimizer = trial.suggest_categorical(\"optimizer\", [\"Adam\", \"RMSprop\"])\n    \n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(Bidirectional(layers.LSTM(units, activation=activation)))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n    \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n  \n  elif model_type == \"cnn\":\n    # Trial variables\n    units = trial.suggest_int(\"units\", 50, 200)\n    dense_layers = trial.suggest_int(\"dense_layers\", 0, 2)\n    activation = trial.suggest_categorical(\"activation\", [\"relu\", \"tanh\"])\n    optimizer = trial.suggest_categorical(\"optimizer\", [\"Adam\", \"RMSprop\"])\n    \n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.Conv1D(units, 1, activation=activation))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n      \n    rnn_model.add(layers.Flatten())\n    \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n    \n  elif model_type == \"cnn_lstm\":\n    # Trial variables\n    units = trial.suggest_int(\"units\", 50, 200)\n    dense_layers = trial.suggest_int(\"dense_layers\", 0, 2)\n    activation = trial.suggest_categorical(\"activation\", [\"relu\", \"tanh\"])\n    optimizer = trial.suggest_categorical(\"optimizer\", [\"Adam\", \"RMSprop\"])\n    \n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.Conv1D(units, 1, activation=activation))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n    \n    rnn_model.add(layers.LSTM(units, activation=activation))\n    \n    for layer in range(dense_layers):\n      rnn_model.add(layers.Dense(units, activation=\"relu\"))\n    \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n    \n  return rnn_model\n\n\n# Define Optuna Objective\ndef rnn_objective(trial):\n  import tensorflow as tf\n  \n  # Define training variables\n  batch_size = trial.suggest_int(\"batch_size\", 1, 100, log=True)\n  epochs = trial.suggest_int(\"epochs\", 10, 100)\n  \n  # Call model\n  rnn_model = create_rnn_model(trial)\n  \n  # Fit the model\n  rnn_model.fit(lstm_train_features, lstm_train_targets, batch_size, epochs, verbose=0);\n\n  # Forecast for the test data\n  rnn_forecast = rnn_model.predict(lstm_test_features)\n\n  # Create a loop to calculate cumulative cost of the forecast\n  storage = 0\n  cumulative_cost = 0\n  book_price = 20\n  monthly_storage_cost = 100\n  for step in range(len(lstm_test_targets)):\n\n    # Get the cost and difference for storage for the current step\n    cost, to_storage = cost_function(\n      storage, \n      lstm_test_targets[step], \n      rnn_forecast[step][0], \n      book_price, \n      monthly_storage_cost)\n\n    # Add cost to cumulative cost and storage difference to storage\n    cumulative_cost += int(cost)\n    storage += int(to_storage)\n\n  total_cost = cumulative_cost + storage*book_price\n  return total_cost\n\n# Create Optuna Study and Minimize total_cost\nrnn_study = optuna.create_study(direction=\"minimize\", sampler=optuna.samplers.QMCSampler())\nrnn_study.optimize(rnn_objective, n_trials=20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_2 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_2 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_2 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_3 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_4 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_5 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_6 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_7 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_7 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_7 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_11 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_12 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_14 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_15 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_16 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_17 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_18 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_19 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n:::\n\n\n::: {.cell cache='true' execution_count=10}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"RNN Model with Best Parameters\"}\n# Disable logging\ntf.keras.utils.disable_interactive_logging()\n\n# Define best model parameters\nbest_rnn_model_parameters = rnn_study.best_params\nmodel_type = best_rnn_model_parameters[\"model_type\"]\nunits = best_rnn_model_parameters[\"units\"]\nactivation = best_rnn_model_parameters[\"activation\"]\ndense_layers = best_rnn_model_parameters[\"dense_layers\"]\nlstm_layers = best_rnn_model_parameters[\"lstm_layers\"] if \"lstm_layers\" in best_rnn_model_parameters.keys() else 0\noptimizer = best_rnn_model_parameters[\"optimizer\"]\nbatch_size = best_rnn_model_parameters[\"batch_size\"]\nepochs = best_rnn_model_parameters[\"epochs\"]\ndropout = best_rnn_model_parameters[\"dropout\"]\n\ntest_subset = subset[730:1095]\nval_subset = subset[1095:1461]\n\ntest_targets = np.array(test_subset[\"num_sold\"])\ntest_features = np.array(test_subset.drop(columns=[\"num_sold\"])).reshape((test_subset.shape[0], 1, test_subset.shape[1] - 1))\nval_targets = np.array(val_subset[\"num_sold\"])\nval_features = np.array(val_subset.drop(columns=[\"num_sold\"])).reshape((val_subset.shape[0], 1, val_subset.shape[1] - 1))\n\n\nif model_type == \"vanilla_lstm\":\n\n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.LSTM(units, activation=activation))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n        \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n\n\nelif model_type == \"stacked_lstm\":\n\n    # Define model with trial variables\n    rnn_model = Sequential()\n\n    for layer in range(lstm_layers):\n        if layer == lstm_layers - 1:\n            rnn_model.add(layers.LSTM(units, activation=activation))\n        else:\n            rnn_model.add(layers.LSTM(units, activation=activation, return_sequences=True))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n\n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n\n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n\nelif model_type == \"bidirectional_lstm\":\n\n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(Bidirectional(layers.LSTM(units, activation=activation)))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n\n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n\n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n\nelif model_type == \"cnn\":\n\n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.Conv1D(units, 1, activation=activation))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n        \n    rnn_model.add(layers.Flatten())\n    \n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n    \n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n\nelif model_type == \"cnn_lstm\":\n\n    # Define model with trial variables\n    rnn_model = Sequential()\n    rnn_model.add(layers.Conv1D(units, 1, activation=activation))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n\n    rnn_model.add(layers.LSTM(units, activation=activation))\n\n    for layer in range(dense_layers):\n        rnn_model.add(layers.Dense(units, activation=\"relu\"))\n\n    if dropout:\n      rnn_model.add(layers.Dropout(rate=0.25))\n\n    rnn_model.add(layers.Dense(1))\n    rnn_model.compile(loss=\"mae\", optimizer=optimizer)\n    \n# Fit the model\nrnn_model.fit(test_features,\n              test_targets,\n              batch_size,\n              epochs,\n              verbose=1,\n              validation_data=(val_features, val_targets),\n              callbacks=tf.keras.callbacks.EarlyStopping(patience=7, min_delta=0.1));\n\n# Forecast for the test data\nrnn_forecast = rnn_model.predict(val_features)\n\n# Calculate total cost\nstorage = 0\ncumulative_cost = 0\nbook_price = 20\nmonthly_storage_cost = 100\nfor step in range(len(val_targets)):\n\n    # Get the cost and difference for storage for the current step\n    cost, to_storage = cost_function(\n      storage, \n      val_targets[step], \n      rnn_forecast[step][0], \n      book_price, \n      monthly_storage_cost)\n\n    # Add cost to cumulative cost and storage difference to storage\n    cumulative_cost += int(cost)\n    storage += int(to_storage)\n\nrnn_model_total_cost = cumulative_cost + storage*book_price\n\n# Plot both test data and forecast from the model to compare them visually.\nplot_forecasts(val_targets, rnn_forecast, title=\"Simple LSTM Model Forecasts\");\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_20 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_21 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING:tensorflow:Layer lstm_22 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"a133a400-4c2b-4227-ba3b-06bf07c108a9\" class=\"plotly-graph-div\" style=\"height:500px; width:700px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"a133a400-4c2b-4227-ba3b-06bf07c108a9\")) {                    Plotly.newPlot(                        \"a133a400-4c2b-4227-ba3b-06bf07c108a9\",                        [{\"hovertemplate\":\"=Observed<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Observed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Observed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[142.0,98.0,109.0,102.0,116.0,99.0,83.0,90.0,84.0,91.0,93.0,113.0,78.0,89.0,87.0,88.0,89.0,101.0,101.0,82.0,92.0,88.0,91.0,90.0,102.0,99.0,89.0,88.0,90.0,85.0,89.0,103.0,104.0,87.0,84.0,83.0,86.0,91.0,102.0,97.0,91.0,85.0,87.0,88.0,85.0,92.0,91.0,84.0,83.0,83.0,81.0,82.0,89.0,105.0,83.0,83.0,81.0,76.0,80.0,99.0,86.0,78.0,77.0,70.0,72.0,70.0,86.0,86.0,67.0,75.0,73.0,71.0,73.0,78.0,93.0,69.0,67.0,66.0,74.0,76.0,80.0,92.0,72.0,71.0,69.0,69.0,66.0,76.0,73.0,65.0,72.0,61.0,55.0,56.0,60.0,69.0,55.0,54.0,59.0,58.0,60.0,69.0,71.0,56.0,64.0,64.0,59.0,66.0,74.0,76.0,52.0,55.0,48.0,54.0,55.0,57.0,66.0,57.0,55.0,53.0,55.0,59.0,69.0,75.0,65.0,63.0,67.0,68.0,63.0,67.0,69.0,64.0,56.0,52.0,56.0,62.0,69.0,68.0,57.0,58.0,60.0,58.0,61.0,74.0,75.0,65.0,63.0,61.0,62.0,68.0,65.0,68.0,65.0,63.0,60.0,62.0,70.0,75.0,79.0,63.0,63.0,60.0,69.0,64.0,70.0,70.0,61.0,56.0,60.0,58.0,62.0,75.0,74.0,57.0,65.0,58.0,59.0,59.0,73.0,73.0,60.0,66.0,68.0,65.0,65.0,70.0,77.0,62.0,66.0,67.0,70.0,67.0,69.0,68.0,64.0,65.0,61.0,61.0,68.0,69.0,76.0,56.0,63.0,64.0,59.0,66.0,75.0,76.0,61.0,64.0,65.0,60.0,69.0,76.0,79.0,67.0,66.0,70.0,64.0,64.0,81.0,78.0,70.0,64.0,69.0,70.0,61.0,78.0,78.0,71.0,67.0,77.0,72.0,72.0,71.0,78.0,69.0,73.0,69.0,69.0,67.0,80.0,86.0,66.0,70.0,70.0,72.0,75.0,86.0,83.0,71.0,63.0,72.0,71.0,67.0,81.0,82.0,73.0,65.0,77.0,61.0,81.0,89.0,79.0,69.0,76.0,68.0,76.0,77.0,82.0,91.0,68.0,71.0,71.0,82.0,72.0,90.0,103.0,77.0,80.0,86.0,90.0,86.0,94.0,98.0,78.0,77.0,77.0,84.0,89.0,95.0,102.0,80.0,84.0,84.0,80.0,71.0,81.0,99.0,79.0,76.0,79.0,81.0,86.0,100.0,96.0,76.0,74.0,86.0,82.0,76.0,91.0,100.0,80.0,87.0,80.0,81.0,87.0,97.0,104.0,79.0,76.0,87.0,76.0,86.0,98.0,95.0,76.0,88.0,82.0,83.0,91.0,87.0,90.0,84.0,83.0,83.0,82.0,87.0,85.0,107.0,85.0,80.0,88.0,78.0,86.0,99.0,98.0,86.0,82.0,84.0,89.0,85.0,102.0,90.0,79.0,83.0,87.0,84.0,94.0,122.0,131.0,126.0,157.0,169.0,143.0],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"=Predicted<br>index=%{x}<br>Sales=%{y}<extra></extra>\",\"legendgroup\":\"Predicted\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Predicted\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],\"xaxis\":\"x\",\"y\":[106.30654907226562,116.40312194824219,121.01404571533203,132.76678466796875,135.301513671875,101.06381225585938,107.67555236816406,92.2025146484375,87.26155853271484,95.86298370361328,112.8382568359375,117.9668197631836,102.22937774658203,96.13428497314453,86.7293930053711,86.8812484741211,96.2574691772461,105.02098083496094,119.84657287597656,89.79032135009766,94.4855728149414,85.50499725341797,80.66785430908203,94.3231201171875,95.0383071899414,107.19462585449219,92.92906951904297,95.65288543701172,91.62920379638672,87.78661346435547,91.32320404052734,97.78728485107422,111.24108123779297,95.99433135986328,88.44368743896484,85.18488311767578,89.91213989257812,95.42192840576172,100.1011962890625,103.59368896484375,87.23104858398438,93.06562805175781,90.35736846923828,95.07976531982422,91.181884765625,100.9552993774414,105.60091400146484,94.9591293334961,90.2622299194336,90.41728210449219,86.80799102783203,91.89875030517578,93.78534698486328,96.02440643310547,91.55933380126953,83.43917083740234,86.36602020263672,85.68228149414062,86.6093978881836,93.41603088378906,96.80899810791016,86.76654815673828,89.37479400634766,86.3944320678711,76.90350341796875,88.12117767333984,99.19104766845703,95.20643615722656,86.50753021240234,83.3050765991211,85.90314483642578,82.14289093017578,92.87664794921875,92.50928497314453,99.02368927001953,84.24266815185547,82.9498291015625,80.2609634399414,79.59292602539062,83.66732025146484,90.95189666748047,89.87134552001953,77.3848648071289,78.55155944824219,80.06539154052734,74.59978485107422,82.84732055664062,90.33832550048828,89.86617279052734,74.48087310791016,82.0179443359375,74.56986236572266,74.92140197753906,85.73200988769531,89.43486785888672,90.13495635986328,76.171875,82.85248565673828,78.45197296142578,77.0243911743164,77.15190887451172,94.05493927001953,91.09040069580078,78.46793365478516,79.13257598876953,74.11128997802734,72.24312591552734,79.70514678955078,87.20745849609375,90.49724578857422,76.46405029296875,78.22968292236328,77.62682342529297,74.8830795288086,80.15772247314453,94.37470245361328,96.77613067626953,78.94955444335938,87.06366729736328,83.34552764892578,73.47850799560547,74.36158752441406,96.37316131591797,109.59891510009766,79.7925033569336,80.26543426513672,73.27085876464844,72.68900299072266,74.42826080322266,86.89713287353516,91.12391662597656,76.00615692138672,67.29242706298828,73.07704162597656,68.98131561279297,72.20922088623047,81.26129913330078,88.84225463867188,71.17279815673828,75.6980972290039,68.13997650146484,69.89165496826172,70.37590026855469,79.88116455078125,86.31269836425781,69.74491119384766,71.59754943847656,70.51898193359375,65.61316680908203,73.56160736083984,77.43946075439453,91.91033935546875,65.41165161132812,70.96306610107422,75.5772705078125,68.84142303466797,77.32147216796875,89.36193084716797,88.9459457397461,68.46932983398438,68.94181060791016,73.42626953125,72.0827407836914,77.76433563232422,91.96126556396484,86.69305419921875,78.31826782226562,74.01153564453125,77.36617279052734,72.4217300415039,73.07294464111328,84.71866607666016,81.90904998779297,71.70230102539062,63.9163932800293,75.09522247314453,66.21263885498047,78.43749237060547,86.5870132446289,77.57811737060547,69.04865264892578,65.84664916992188,65.97663879394531,66.6534194946289,73.81937408447266,76.83702850341797,86.40830993652344,70.15897369384766,74.09644317626953,66.0300064086914,69.29644775390625,72.82530975341797,77.92719268798828,91.93192291259766,74.3191146850586,69.34333801269531,70.92325592041016,66.25012969970703,73.9000473022461,81.5040283203125,82.32868194580078,72.46408081054688,69.16728973388672,64.38804626464844,65.8390121459961,73.30480194091797,74.90122985839844,80.1425552368164,66.98301696777344,72.94048309326172,67.59101104736328,70.15446472167969,73.51730346679688,73.22685241699219,88.2125015258789,69.97936248779297,66.81057739257812,70.08824157714844,68.70498657226562,75.8780746459961,76.14464569091797,85.9815444946289,68.72435760498047,68.4358901977539,74.06246185302734,73.21133422851562,69.12879180908203,75.59014129638672,81.45272064208984,70.84680938720703,72.51499938964844,70.17308807373047,67.96459197998047,69.13298034667969,78.78114318847656,81.3717269897461,73.21109771728516,69.47724151611328,69.41645050048828,68.63925170898438,74.2264633178711,80.96729278564453,90.51506805419922,75.1110610961914,68.80333709716797,72.65538024902344,72.19795227050781,76.05762481689453,82.69318389892578,92.25542449951172,80.03878021240234,75.31421661376953,74.2348861694336,74.66000366210938,80.73683166503906,78.9606704711914,96.75350952148438,72.2101058959961,72.38780975341797,72.18535614013672,74.9764175415039,78.9476089477539,83.66490936279297,88.41448211669922,75.80046844482422,75.10643768310547,72.96570587158203,80.4980697631836,81.63935852050781,86.21504211425781,94.32010650634766,78.83476257324219,74.52169036865234,78.85633087158203,76.29353332519531,82.75257110595703,89.0263442993164,94.63343048095703,80.44280242919922,81.3594741821289,87.1480484008789,81.3579330444336,88.0199203491211,94.06145477294922,96.19066619873047,77.84627532958984,82.86711883544922,76.6471176147461,81.51827239990234,83.7987289428711,91.19342041015625,91.83934020996094,76.38921356201172,76.05316925048828,79.15802001953125,77.70925903320312,78.14421844482422,96.07865142822266,91.29059600830078,80.83484649658203,84.7567367553711,83.80841064453125,77.69625854492188,80.9889144897461,95.00601959228516,99.7751693725586,83.2798080444336,86.1593246459961,83.72367095947266,80.26795196533203,89.71785736083984,98.88233184814453,100.3631591796875,85.00149536132812,87.2121810913086,88.60797882080078,80.7668685913086,93.42806243896484,93.8257064819336,105.75308990478516,86.77344512939453,84.34037017822266,79.95215606689453,77.35713958740234,86.70773315429688,95.45021057128906,101.27742767333984,78.86933135986328,81.59136199951172,82.57198333740234,78.66854095458984,92.54850006103516,97.8001480102539,104.56800079345703,83.4126205444336,78.41414642333984,82.90023040771484,82.3970947265625,84.75138092041016,96.52124786376953,108.15697479248047,86.10253143310547,84.54066467285156,84.97219848632812,86.0733871459961,86.28196716308594,92.54752349853516,112.39783477783203,80.6657943725586,84.13703155517578,82.03197479248047,83.72563171386719,87.93975067138672,102.54778289794922,110.9996109008789,87.1410903930664,111.39380645751953,95.64540100097656,95.32003021240234,99.80992889404297,121.2625503540039,161.78253173828125,137.08810424804688,145.86973571777344,125.42029571533203,126.5094223022461],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"index\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Sales\"}},\"legend\":{\"title\":{\"text\":\"\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Simple LSTM Model Forecasts\"},\"height\":500,\"width\":700},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('a133a400-4c2b-4227-ba3b-06bf07c108a9');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n\n::: {.cell-output .cell-output-stdout}\n```\nMAPE for Tuned RNN Model is: 0.1282406598329544\nR2 Score for Tuned RNN Model is: 0.4284575613815327\n\nTotal Cost for Tuned RNN Model is: €53,048.00\n```\n:::\n:::\n\n\n# Results and Conclusion\n\n\n\nWe have tuned all models and calculated the total costs in terms of our cost function and the winner is **XGBoost** with the total cost of **€61,498.00**! XGBoost's performance is not surprising given that it is usually the winning model for competitions but STL-ARIMA has also performed very successfully. RNN models were, for me, somewhat disappointing; however, it should be stated that we didn't fully utilized LSTM cells' memory because we have only used one timestep in the input. Increasing timesteps could potentially improve its performance. ARIMAX was the worst performer even with tuning. It could be because of the feature matrix that we have created couldn't fully capture seasonality and trend.\n\nEven though we have added calendar features, they might not be enough to predict seasonality and trend. Therefore, a decomposition model where a model similar to STL decompose the time series to trend, seasonality, and residuals and after that a seperate regression model trained on only residuals could potentially be more accurate; but that's all for this post.\n\n**Thank you for reading this post and see you on the next one!**\n\n",
    "supporting": [
      "book_sales_forecasting_deep_learning_part_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.16.1.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        \n"
      ]
    }
  }
}